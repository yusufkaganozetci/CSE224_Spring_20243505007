
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/kagan/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/alu/src/alu.v
Parsing SystemVerilog input from `/openlane/designs/alu/src/alu.v' to AST representation.
Storing AST representation for module `$abstract\alu'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\alu'.
Generating RTLIL representation for module `\alu'.

4.1. Analyzing design hierarchy..
Top module:  \alu

4.2. Analyzing design hierarchy..
Top module:  \alu
Removing unused module `$abstract\alu'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/alu/runs/RUN_2025.05.04_08.56.33/tmp/synthesis/hierarchy.dot'.
Dumping module alu to page 1.
Renaming module alu to alu.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \alu

7.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/alu/src/alu.v:31$1 in module alu.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/openlane/designs/alu/src/alu.v:31$1'.
     1/1: $1\out[7:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu.\out' from process `\alu.$proc$/openlane/designs/alu/src/alu.v:31$1'.

16. Executing PROC_DFF pass (convert process syncs to FFs).

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu.$proc$/openlane/designs/alu/src/alu.v:31$1'.
Removing empty process `alu.$proc$/openlane/designs/alu/src/alu.v:31$1'.
Cleaned up 1 empty switch.

19. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$14_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$15_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$16_CMP0 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/openlane/designs/alu/src/alu.v:38$7 ($add).
  creating $macc model for $mul$/openlane/designs/alu/src/alu.v:37$6 ($mul).
  creating $macc model for $sub$/openlane/designs/alu/src/alu.v:39$8 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/alu/src/alu.v:39$8.
  creating $alu model for $macc $add$/openlane/designs/alu/src/alu.v:38$7.
  creating $macc cell for $mul$/openlane/designs/alu/src/alu.v:37$6: $auto$alumacc.cc:365:replace_macc$18
  creating $alu cell for $add$/openlane/designs/alu/src/alu.v:38$7: $auto$alumacc.cc:485:replace_alu$19
  creating $alu cell for $sub$/openlane/designs/alu/src/alu.v:39$8: $auto$alumacc.cc:485:replace_alu$22
  created 2 $alu and 1 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$10 in front of them:
        $auto$alumacc.cc:485:replace_alu$22
        $auto$alumacc.cc:485:replace_alu$19

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$10: { $procmux$17_CMP $procmux$16_CMP $procmux$15_CMP $procmux$14_CMP $procmux$13_CMP $auto$opt_reduce.cc:134:opt_pmux$33 }
  Optimizing cells in module \alu.
Performed a total of 1 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

37.26. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  add \A [3:0] * \B [3:0] (4x4 bits, unsigned)
Using template $paramod$e830d104b5de63a966ae948f6aff012e63986700\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$fd7bfb1a4f3a7c2ac1a35670d0fa64ccc7b91841\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001000 for cells of type $fa.
No more expansions possible.
<suppressed ~422 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~191 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 17 unused cells and 203 unused wires.
<suppressed ~18 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 297 gates and 317 wires to a netlist network with 19 inputs and 8 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       11
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOT cells:       13
ABC RESULTS:               MUX cells:        7
ABC RESULTS:               XOR cells:       38
ABC RESULTS:              NAND cells:       22
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:               NOR cells:       17
ABC RESULTS:                OR cells:       40
ABC RESULTS:            ANDNOT cells:      110
ABC RESULTS:        internal signals:      290
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:        8
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 113 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \alu

42.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

43. Printing statistics.

=== alu ===

   Number of wires:                271
   Number of wire bits:            294
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                275
     $_ANDNOT_                     110
     $_AND_                         11
     $_MUX_                          7
     $_NAND_                        22
     $_NOR_                         17
     $_NOT_                         13
     $_ORNOT_                        6
     $_OR_                          40
     $_XNOR_                        11
     $_XOR_                         38

44. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/alu/runs/RUN_2025.05.04_08.56.33/tmp/synthesis/post_techmap.dot'.
Dumping module alu to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

49. Printing statistics.

=== alu ===

   Number of wires:                271
   Number of wire bits:            294
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                275
     $_ANDNOT_                     110
     $_AND_                         11
     $_MUX_                          7
     $_NAND_                        22
     $_NOR_                         17
     $_NOT_                         13
     $_ORNOT_                        6
     $_OR_                          40
     $_XNOR_                        11
     $_XOR_                         38

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/kagan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/kagan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/kagan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/kagan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':

55. Printing statistics.

=== alu ===

   Number of wires:                271
   Number of wire bits:            294
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                275
     $_ANDNOT_                     110
     $_AND_                         11
     $_MUX_                          7
     $_NAND_                        22
     $_NOR_                         17
     $_NOT_                         13
     $_ORNOT_                        6
     $_OR_                          40
     $_XNOR_                        11
     $_XOR_                         38

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\alu' to `/tmp/yosys-abc-1NCGk2/input.blif'..
Extracted 275 gates and 294 wires to a netlist network with 19 inputs and 8 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-1NCGk2/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-1NCGk2/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-1NCGk2/input.blif 
ABC: + read_lib -w /openlane/designs/alu/runs/RUN_2025.05.04_08.56.33/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/alu/runs/RUN_2025.05.04_08.56.33/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.09 sec
ABC: Memory =    9.54 MB. Time =     0.09 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/alu/runs/RUN_2025.05.04_08.56.33/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/alu/runs/RUN_2025.05.04_08.56.33/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (2542.73 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    178 (  7.9 %)   Cap =  9.2 ff (  1.8 %)   Area =     1538.98 ( 92.1 %)   Delay =  2580.24 ps  ( 15.7 %)               
ABC: Path  0 --      14 : 0    5 pi                       A =   0.00  Df =  31.7  -17.9 ps  S =  49.6 ps  Cin =  0.0 ff  Cout =   9.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      33 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 344.2 -140.8 ps  S = 378.3 ps  Cin =  2.1 ff  Cout =  31.8 ff  Cmax = 130.0 ff  G = 1443  
ABC: Path  2 --      43 : 4    3 sky130_fd_sc_hd__a22oi_2 A =  12.51  Df = 508.4  -50.5 ps  S = 210.4 ps  Cin =  4.3 ff  Cout =  10.9 ff  Cmax = 170.3 ff  G =  238  
ABC: Path  3 --      50 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df = 939.6 -326.3 ps  S =  80.7 ps  Cin =  1.5 ff  Cout =   3.9 ff  Cmax = 310.4 ff  G =  249  
ABC: Path  4 --      55 : 3    2 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =1138.8 -321.1 ps  S =  37.4 ps  Cin =  2.4 ff  Cout =   4.2 ff  Cmax = 309.5 ff  G =  169  
ABC: Path  5 --      57 : 4    2 sky130_fd_sc_hd__a31o_2  A =   8.76  Df =1405.2 -365.5 ps  S =  94.9 ps  Cin =  2.4 ff  Cout =  13.1 ff  Cmax = 271.9 ff  G =  534  
ABC: Path  6 --      59 : 2    2 sky130_fd_sc_hd__xor2_2  A =  16.27  Df =1556.7 -208.1 ps  S = 143.2 ps  Cin =  8.6 ff  Cout =   7.0 ff  Cmax = 130.0 ff  G =   78  
ABC: Path  7 --     200 : 3    1 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =1735.6  -14.3 ps  S =  32.4 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 309.5 ff  G =  100  
ABC: Path  8 --     203 : 4    1 sky130_fd_sc_hd__a31o_2  A =   8.76  Df =1957.8 -105.2 ps  S =  32.7 ps  Cin =  2.4 ff  Cout =   1.5 ff  Cmax = 271.9 ff  G =   58  
ABC: Path  9 --     204 : 3    1 sky130_fd_sc_hd__or3_2   A =   7.51  Df =2349.6 -408.1 ps  S =  72.2 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  138  
ABC: Path 10 --     205 : 1    1 sky130_fd_sc_hd__buf_1   A =   3.75  Df =2580.2 -322.7 ps  S = 395.7 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi13 (\B [1]).  End-point = po7 (\out [4]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   19/    8  lat =    0  nd =   178  edge =    484  area =1539.28  delay =10.00  lev = 10
ABC: + write_blif /tmp/yosys-abc-1NCGk2/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       12
ABC RESULTS:        internal signals:      267
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:        8
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 294 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

63. Printing statistics.

=== alu ===

   Number of wires:                174
   Number of wire bits:            197
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     sky130_fd_sc_hd__a211o_2        2
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21o_2         7
     sky130_fd_sc_hd__a21oi_2        9
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2         3
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a311o_2        4
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2        12
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and2b_2        6
     sky130_fd_sc_hd__and3_2         9
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__buf_1         12
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__nand2_2       21
     sky130_fd_sc_hd__nand3_2        3
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        13
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2         4
     sky130_fd_sc_hd__o21ai_2        9
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o22a_2         5
     sky130_fd_sc_hd__o31a_2         2
     sky130_fd_sc_hd__or2_2          8
     sky130_fd_sc_hd__or2b_2         3
     sky130_fd_sc_hd__or3_2          6
     sky130_fd_sc_hd__or3b_2         3
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xnor2_2       11
     sky130_fd_sc_hd__xor2_2         3

   Chip area for module '\alu': 1538.976000

64. Executing Verilog backend.
Dumping module `\alu'.

65. Executing JSON backend.

End of script. Logfile hash: a34d0464f6, CPU: user 0.46s system 0.03s, MEM: 42.69 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 49% 2x abc (0 sec), 14% 2x read_liberty (0 sec), ...
